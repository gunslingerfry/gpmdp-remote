#!/usr/bin/env bash
#
# gpmdp-remote - get info from Google Play Music Desktop Player easily
# https://github.com/gunslingerfry/gpmdp-remote
#
# Created by Andrew Titmuss
# https://github.com/iandrewt/
# modified by Matthew Fry
# https://github.com/gunslingerfry

# Speed up script by not using Unicode
export LC_ALL=C
export LANG=C

# Determine config file location from uname
case "$(uname)" in
    "Linux" | *"BSD") json_file="$HOME/.config/Google Play Music Desktop Player/json_store/playback.json" ;;
    "Darwin") json_file="$HOME/Library/Application Support/Google Play Music Desktop Player/json_store/playback.json" ;;
    "CYGWIN"*) json_file="$APPDATA/Google Play Music Desktop Player/json_store/playback.json" ;;
esac

title () {
    printf "%s\n" "$(awk -F '"|:' '/title/ {printf $5}' "$json_file")"
}

artist () {
    printf "%s\n" "$(awk -F '"|:' '/artist/ {printf $5}' "$json_file")"
}

album () {
    printf "%s\n" "$(awk -F '"|:' '!/albumArt/ && /album/ {printf $5}' "$json_file")"
}

album_art () {
    printf "%s\n" "$(awk -F '"|:' '/albumArt/ {printf $5":"$6}' "$json_file")"
}

time_current () {
    printf "%s\n" "$(awk -F ': |,' '/current/ {printf $2}' "$json_file")"
}

time_total () {
    printf "%s\n" "$(awk -F ': |,' '/total/ {printf $2}' "$json_file")"
}

rating () {
    LIKED=$(awk -F ': |,' '/\"liked\"/ { printf $2 }' "$json_file")
    DISLIKED=$(awk -F ': |,' '/disliked/ { printf $2 }' "$json_file")
    RATING="0"
    # it's really not important which one wins if somehow both are true
    if [ "${LIKED}" = "true" ]; then
        RATING="1"
    fi
    if [ "${DISLIKED}" = "true" ]; then
        RATING="-1"
    fi
    echo "${RATING}"
}

time_remain_sec () {
    TIME_TOTAL="$(time_total)"
    #echo "$TIME_TOTAL"
    TIME_CURRENT="$(time_current)"
    let TIME_REMAIN=(TIME_TOTAL - TIME_CURRENT)/1000
    let TIME_REMAIN_MIN=TIME_REMAIN/60
    let TIME_REMAIN_SEC=TIME_REMAIN%60
    printf "%02d:%02d" $TIME_REMAIN_MIN $TIME_REMAIN_SEC
#    echo "$TIME_REMAIN_MIN:$TIME_REMAIN_SEC"
}

time_current_sec () {
    TIME_CURRENT_MS="$(time_current)"
    let TIME_CURRENT=TIME_CURRENT_MS/1000
    let TIME_CURRENT_MIN=TIME_CURRENT/60
    let TIME_CURRENT_SEC=TIME_CURRENT%60
    printf "%02d:%02d" $TIME_CURRENT_MIN $TIME_CURRENT_SEC
}

gpmdp_status () {
    gpmdp_status=$(awk -F ': |,' '/playing/ {printf $2}' "$json_file")

    if [[ "$gpmdp_status" == *"true"* ]]; then
        printf "%s\n" "Playing"
    elif [[ "$gpmdp_status" == *"false"* ]]; then
        printf "%s\n" "Paused"
    fi
}

gpmdp_info () {
    if [ "$(gpmdp_status)" == "Playing" ]; then
        printf "%s\n" "Playing: $(title) by $(artist)"
    elif [ "$(gpmdp_status)" == "Paused" ]; then
        printf "%s\n" "Paused: $(title) by $(artist)"
    fi
}

current () {
    printf "%s\n" "$(artist) - $(title)"
}

usage () { cat << EOF

    usage: gpmdp-remote <option>

    info            Print info about now playing song
    title           Print current song title
    artist          Print current song artist
    album           Print current song album
    album_art       Print current song album art URL
    time_current    Print current song time in milliseconds
    time_total      Print total song time in milliseconds
    status          Print whether GPMDP is paused or playing
    current         Print now playing song in "artist - song" format
    time_remain_sec Print remaining time in seconds
    time_current_sec Print current time in seconds
    rating          Print 1 if liked, -1 if disliked, 0 if neither
    help            Print this help message

EOF
exit 1
}


case $1 in
    info) gpmdp_info ;;
    title) title ;;
    artist) artist ;;
    album) album ;;
    album_art) album_art ;;
    time_current) time_current ;;
    time_total) time_total ;;
    status) gpmdp_status ;;
    current) current ;;
    time_remain_sec) time_remain_sec ;;
    time_current_sec) time_current_sec ;;
    rating) rating ;;
    *) usage ;;
esac

